Summary

Concurrency has become the number one goal of scalable systems. This means dealing with inconsistency, non-determinism and distributed computation. The existing OTP services were geared around single process constructs that are used as components of a distributed architecture. The next generation must embrace multi-core and distributed systems, but do so in a way that makes common, complicated patterns of concurrency accessible to all programmers.

Issues

  - Replace build and bundle deployment with rebar
  - Rework application, included_applications and managing applications
  - Eliminate supervisor hierarchy in favor of linked networks of processes
  - Re-evaluate gen_server / gen_fsm in the context of pooled resources
  - Create documentation that reflects the OTP components as related
  - Consider logging part of a high-volume distributed system
  - Nodes, monitoring, distributed erlang without mesh

Features
  - Incorporate pooled process concepts inside OTP objects
  - Add memory of init and restarts in supervision
  - Enable easy configuration of services and clusters of services
  - Distributed erlang with more than one comms socket

Concepts

 - Coop: cooperative processing pattern (digraph, pool and asynch/synch access)
 - Mgr: temporary supervision cluster

